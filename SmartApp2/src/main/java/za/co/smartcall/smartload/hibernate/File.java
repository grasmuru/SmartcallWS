package za.co.smartcall.smartload.hibernate;

// Generated 18 Feb 2015 1:19:51 PM by Hibernate Tools 4.0.0

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javafx.beans.property.BooleanProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * File generated by hbm2java
 */
@Entity
@Table(name = "FILE")
public class File implements java.io.Serializable {

	private int id;
	private Transaction transaction;
	private String content;
	private Date lastarchived;
	private Date receiveddate;
	private boolean imported;
	private boolean extracted;
	private boolean archived;
	private String downloadLocation;
	private String extractLocation;
	private Set<Voucher> vouchers = new HashSet<Voucher>(0);
	private String fileName;

	public File() {
	}

	public File(int id, Transaction transaction, String content,
			Date lastarchived, Date receiveddate, boolean imported,
			boolean extracted, boolean archived, String downloadLocation,
			String extractLocation) {
		this.id = id;
		this.transaction = transaction;
		this.content = content;
		this.lastarchived = lastarchived;
		this.receiveddate = receiveddate;
		this.imported = imported;
		this.extracted = extracted;
		this.archived = archived;
		this.downloadLocation = downloadLocation;
		this.extractLocation = extractLocation;
	}

	public File(int id, Transaction transaction, String content,
			Date lastarchived, Date receiveddate, boolean imported,
			boolean extracted, boolean archived, String downloadLocation,
			String extractLocation, Set<Voucher> vouchers) {
		this.id = id;
		this.transaction = transaction;
		this.content = content;
		this.lastarchived = lastarchived;
		this.receiveddate = receiveddate;
		this.imported = imported;
		this.extracted = extracted;
		this.archived = archived;
		this.downloadLocation = downloadLocation;
		this.extractLocation = extractLocation;
		this.vouchers = vouchers;
	}

	@Id @GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TRANSACTIONID", nullable = false)
	public Transaction getTransaction() {
		return this.transaction;
	}

	public void setTransaction(Transaction transaction) {
		this.transaction = transaction;
	}

	@Column(name = "CONTENT", nullable = false, length = 50)
	public String getContent() {
		return this.content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LASTARCHIVED", length = 23)
	public Date getLastarchived() {
		return this.lastarchived;
	}

	public void setLastarchived(Date lastarchived) {
		this.lastarchived = lastarchived;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "RECEIVEDDATE", nullable = false, length = 23)
	public Date getReceiveddate() {
		return this.receiveddate;
	}

	public void setReceiveddate(Date receiveddate) {
		this.receiveddate = receiveddate;
	}

	@Column(name = "IMPORTED", nullable = false)
	public boolean isImported() {
		return this.imported;
	}

	public void setImported(boolean imported) {
		this.imported = imported;
	}

	@Column(name = "EXTRACTED", nullable = false)
	public boolean isExtracted() {
		return this.extracted;
	}

	public void setExtracted(boolean extracted) {
		this.extracted = extracted;
	}

	@Column(name = "ARCHIVED", nullable = false)
	public boolean isArchived() {
		return this.archived;
	}

	public void setArchived(boolean archived) {
		this.archived = archived;
	}

	@Column(name = "DOWNLOAD_LOCATION", nullable = false, length = 50)
	public String getDownloadLocation() {
		return this.downloadLocation;
	}

	public void setDownloadLocation(String downloadLocation) {
		this.downloadLocation = downloadLocation;
	}

	@Column(name = "EXTRACT_LOCATION", length = 50)
	public String getExtractLocation() {
		return this.extractLocation;
	}

	public void setExtractLocation(String extractLocation) {
		this.extractLocation = extractLocation;
	}
	
	@Column(name = "FILENAME", nullable = false, length = 50)
	public String getFileName() {
		return this.fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "file")
	public Set<Voucher> getVouchers() {
		return this.vouchers;
	}

	public void setVouchers(Set<Voucher> vouchers) {
		this.vouchers = vouchers;
	}
	
	public StringProperty content() {
        return new SimpleStringProperty(content);
    }
	

	
	
	public StringProperty fileName() {
        return new SimpleStringProperty(fileName);
    }
	

	public StringProperty receivedDateProperty() {
	   SimpleDateFormat sdf = new SimpleDateFormat("yy-MM-dd hh:mm:ss");
	   return new SimpleStringProperty(sdf.format(receiveddate));
	}
	
	
	public BooleanProperty extracted() {
        return new SimpleBooleanProperty(extracted);
    }
	
	
	public BooleanProperty imported() {
		 return new SimpleBooleanProperty(imported);
    }
	
	
	public StringProperty network() {
        return new SimpleStringProperty(transaction.getProduct().getProducttype().getNetwork().getNetwork());
    }
	
	public StringProperty amount() {
        return new SimpleStringProperty(transaction.getAmount());
    }
	
	public int receiveDateDifference(final File other) {
		return receiveddate.compareTo(other.receiveddate);
	}

}
